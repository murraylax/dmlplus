// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// checksysR
int checksysR(const Eigen::Map<Eigen::MatrixXd>& Gamma0, const Eigen::Map<Eigen::MatrixXd>& Gamma1, const Eigen::Map<Eigen::MatrixXd>& Psi, const Eigen::Map<Eigen::MatrixXd>& Pi, const Eigen::Map<Eigen::VectorXd>& C);
RcppExport SEXP _gensysR_checksysR(SEXP Gamma0SEXP, SEXP Gamma1SEXP, SEXP PsiSEXP, SEXP PiSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma0(Gamma0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma1(Gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(checksysR(Gamma0, Gamma1, Psi, Pi, C));
    return rcpp_result_gen;
END_RCPP
}
// gensysR
Rcpp::List gensysR(const Eigen::Map<Eigen::MatrixXd>& Gamma0, const Eigen::Map<Eigen::MatrixXd>& Gamma1, const Eigen::Map<Eigen::MatrixXd>& Psi, const Eigen::Map<Eigen::MatrixXd>& Pi, const Eigen::Map<Eigen::VectorXd>& C);
RcppExport SEXP _gensysR_gensysR(SEXP Gamma0SEXP, SEXP Gamma1SEXP, SEXP PsiSEXP, SEXP PiSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma0(Gamma0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma1(Gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(gensysR(Gamma0, Gamma1, Psi, Pi, C));
    return rcpp_result_gen;
END_RCPP
}
// gensysR_qzdetails
Rcpp::List gensysR_qzdetails(const Eigen::Map<Eigen::MatrixXd>& Gamma0, const Eigen::Map<Eigen::MatrixXd>& Gamma1, const Eigen::Map<Eigen::MatrixXd>& Psi, const Eigen::Map<Eigen::MatrixXd>& Pi, const Eigen::Map<Eigen::VectorXd>& C);
RcppExport SEXP _gensysR_gensysR_qzdetails(SEXP Gamma0SEXP, SEXP Gamma1SEXP, SEXP PsiSEXP, SEXP PiSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma0(Gamma0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Gamma1(Gamma1SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Psi(PsiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(gensysR_qzdetails(Gamma0, Gamma1, Psi, Pi, C));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gensysR_checksysR", (DL_FUNC) &_gensysR_checksysR, 5},
    {"_gensysR_gensysR", (DL_FUNC) &_gensysR_gensysR, 5},
    {"_gensysR_gensysR_qzdetails", (DL_FUNC) &_gensysR_gensysR_qzdetails, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gensysR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
